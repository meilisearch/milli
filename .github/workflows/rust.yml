name: Rust

# macos: macos-latest
variables:
  ubuntu: &ubuntu ubuntu-18.04

on:
  push:
    branches: [ staging, trying ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  tests:
    name: Tests on ${{ matrix.os }} with ${{ matrix.rust }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ *ubuntu, macos-latest]
        rust:
          - stable
          - beta
          - nightly
        include:
          - os: ${{ ubuntu }}
            sccache-path: /home/runner/.cache/sccache
          - os: macos-latest
            sccache-path: /Users/runner/Library/Caches/Mozilla.sccache
    env:
      RUSTC_WRAPPER: sccache
      RUSTV: ${{ matrix.rust }}
      SCCACHE_CACHE_SIZE: 2G
      SCCACHE_DIR: ${{ matrix.sccache-path }}
      # SCCACHE_RECACHE: 1 # Uncomment this to clear cache, then comment it back out
    steps:
    - uses: actions/checkout@v2
    - name: Install sccache (${{ ubuntu }})
      if: matrix.os == ${{ ubuntu }}
      env:
        LINK: https://github.com/mozilla/sccache/releases/download
        SCCACHE_VERSION: 0.2.13
      run: |
        SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl
        mkdir -p $HOME/.local/bin
        curl -L "$LINK/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz" | tar xz
        mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    - name: Install sccache (macos-latest)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install sccache
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.rust }}
        override: true
    - name: Run cargo check
      uses: actions-rs/cargo@v1
      with:
        command: check
        args: --all --locked
    - name: Run cargo test
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --locked --release
    - name: Cache cargo registry
      uses: actions/cache@v2
      continue-on-error: false
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    - name: Save sccache
      uses: actions/cache@v2
      continue-on-error: false
      with:
        path: ${{ matrix.sccache-path }}
        key: ${{ runner.os }}-sccache-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-sccache-
    - name: Start sccache server
      run: sccache --start-server
    - name: ${{ matrix.make.name }}
      run: make ${{ matrix.make.task }}
    - name: Print sccache stats
      run: sccache --show-stats
    - name: Stop sccache server
      run: sccache --stop-server || true

  # We don't run test on Windows since we get the following error: There is not enough space on the disk.
  check-on-windows:
    name: Cargo check on Windows
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Run cargo check without any default features
      uses: actions-rs/cargo@v1
      with:
        command: check
        args: --all --locked
    - name: Run cargo check with all default features
      uses: actions-rs/cargo@v1
      with:
        command: check

  fmt:
    name: Run Rustfmt
    runs-on: ${{ ubuntu }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rustfmt
      - name: Run cargo fmt
        # Since we never ran the `build.rs` script in the benchmark directory we are missing one auto-generated import file.
        # Since we want to trigger (and fail) this action as fast as possible, instead of building the benchmark crate
        # we are going to create an empty file where rustfmt expects it.
        run: |
          echo -ne "\n" > benchmarks/benches/datasets_paths.rs
          cargo fmt --all -- --check
